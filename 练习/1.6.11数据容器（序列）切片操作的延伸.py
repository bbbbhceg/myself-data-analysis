# 问题：在Python3中，我想取出列表的位于1,3,7,6下标的元素，程序该怎么写？

# 示例列表
lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]  # 示例列表

# 方法 1：  逐个提取
# 直接通过索引逐个提取指定下标的元素：
result = [lst[1], lst[3], lst[7], lst[6]]
print(result)  # 输出：[1, 3, 7, 6]

# 方法 2：使用列表推导式
# 通过列表推导式提取指定下标的元素：
indices = [1, 3, 7, 6]  # 指定的下标
result = [lst[i] for i in indices]
""""
需要注意的是，这个推导式的使用，根据括号包裹的不同，result的类型也不同
()  <class 'generator'>   
使用小括号时，打印result的结果是对象result的地址，和生成逻辑，只有调用这个对象才进行生成，这更节省运算内存。（便于处理大数据）

[]  <class 'list'>
{}  <class 'set'>
"""
print(result)  # 输出：[1, 3, 7, 6]



#当列表a下标为1的元素是一个列表b，我想从列表a中提取指定下标的元素（如 1中的2号元素、3、7、6）该怎么实现？

# 方法 1：直接访问
# 你可以通过嵌套索引来访问嵌套列表中的元素：
a = [
    0,           # 下标 0
    [10, 20, 30],  # 下标 1，子列表 b
    2,           # 下标 2
    3,           # 下标 3
    4,           # 下标 4
    5,           # 下标 5
    6,           # 下标 6
    7,           # 下标 7
    8,           # 下标 8
    9            # 下标 9
]

# 提取指定元素
element_from_b = a[1][2]  # 从子列表 b 中提取下标为 2 的元素
element_3 = a[3]          # 从 a 中提取下标为 3 的元素
element_7 = a[7]          # 从 a 中提取下标为 7 的元素
element_6 = a[6]          # 从 a 中提取下标为 6 的元素

print(element_from_b)  # 输出：30
print(element_3)       # 输出：3
print(element_7)       # 输出：7
print(element_6)       # 输出：6

# 方法 2：使用列表推导式
# 如果你需要提取多个元素，可以使用列表推导式：
a = [
    0,           # 下标 0
    [10, 20, 30],  # 下标 1，子列表 b
    2,           # 下标 2
    3,           # 下标 3
    4,           # 下标 4
    5,           # 下标 5
    6,           # 下标 6
    7,           # 下标 7
    8,           # 下标 8
    9            # 下标 9
]

# 提取指定元素
indices = [(1, 2), 3, 7, 6]  # 指定的下标，嵌套下标用元组表示
result = []

for index in indices:
    if isinstance(index, tuple):  # 如果是嵌套下标
        result.append(a[index[0]][index[1]])
    else:  # 如果是普通下标
        result.append(a[index])

print(result)  # 输出：[30, 3, 7, 6]
